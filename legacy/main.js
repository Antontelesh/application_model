// Generated by CoffeeScript 1.6.3
(function() {
  var ApplicationModel, Contractor, lowercase, snake,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  lowercase = function(value) {
    if (_.isString(value)) {
      return value.toLowerCase();
    }
    return value;
  };

  snake = function(value) {
    return _.map(value.match(/[A-Z]?[a-z]+/g), function(part) {
      return lowercase(part);
    }).join('_');
  };

  ApplicationModel = (function() {
    function ApplicationModel(params, defaults) {
      var getters, getters_setters, setters;
      getters = this.getGetters();
      setters = this.getSetters();
      getters_setters = _.union(_.keys(getters), _.keys(setters));
      _.each(getters_setters, function(prop_name) {
        return Object.defineProperty(this, prop_name, {
          get: this[getters[prop_name]],
          set: this[setters[prop_name]]
        });
      }, this);
      _.assign(this, defaults, params);
    }

    ApplicationModel.prototype.getMutators = function(type) {
      var methods, mutators, pattern;
      methods = _.methods(this);
      pattern = new RegExp(type + '(\\w+)Attribute');
      mutators = _.filter(methods, function(method) {
        return pattern.test(method);
      });
      return _.reduce(mutators, function(result, mutator_name) {
        var prop_name;
        prop_name = snake(mutator_name.match(pattern)[1]);
        result[prop_name] = mutator_name;
        return result;
      }, {});
    };

    ApplicationModel.prototype.getGetters = function() {
      return this.getMutators('get');
    };

    ApplicationModel.prototype.getSetters = function() {
      return this.getMutators('set');
    };

    return ApplicationModel;

  })();

  Contractor = (function(_super) {
    var default_contractor, kpgf_titles;

    __extends(Contractor, _super);

    default_contractor = {
      business_title: '',
      okpo_inn: '',
      kpgf_entry: 1,
      kpgf_title: '',
      name_surname: '',
      name_name: '',
      name_patronymic: '',
      name: ''
    };

    kpgf_titles = {
      '1': 'ФОП',
      '-1': '',
      '240': 'ТОВ'
    };

    function Contractor(params) {
      Contractor.__super__.constructor.call(this, params, default_contractor);
    }

    Contractor.prototype.getNameAttribute = function() {
      return _.compact([this.name_surname, this.name_name, this.name_patronymic]).join(' ');
    };

    Contractor.prototype.getBusinessTitleAttribute = function() {
      return _.compact([this.kpgf_title, this.name]).join(' ');
    };

    Contractor.prototype.getKpgfTitleAttribute = function() {
      return kpgf_titles[this.kpgf_entry];
    };

    Contractor.prototype.setNameAttribute = function(name) {
      var parts;
      if (name == null) {
        name = '';
      }
      parts = name.toString().split(' ');
      this.name_surname = parts.shift();
      this.name_patronymic = parts.pop();
      return this.name_name = parts.join(' ');
    };

    return Contractor;

  })(ApplicationModel);

  window.contractor = new Contractor({
    name: 'Телеш Антон Владимирович',
    kpgf_entry: 1,
    okpo_inn: '3331515751'
  });

}).call(this);
